// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: vultisig/keysign/v1/blockchain_specific.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionType int32

const (
	TransactionType_TRANSACTION_TYPE_UNSPECIFIED      TransactionType = 0
	TransactionType_TRANSACTION_TYPE_VOTE             TransactionType = 1
	TransactionType_TRANSACTION_TYPE_PROPOSAL         TransactionType = 2
	TransactionType_TRANSACTION_TYPE_IBC_TRANSFER     TransactionType = 3
	TransactionType_TRANSACTION_TYPE_THOR_MERGE       TransactionType = 4
	TransactionType_TRANSACTION_TYPE_THOR_UNMERGE     TransactionType = 5
	TransactionType_TRANSACTION_TYPE_TON_DEPOSIT      TransactionType = 6
	TransactionType_TRANSACTION_TYPE_TON_WITHDRAW     TransactionType = 7
	TransactionType_TRANSACTION_TYPE_GENERIC_CONTRACT TransactionType = 8
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0: "TRANSACTION_TYPE_UNSPECIFIED",
		1: "TRANSACTION_TYPE_VOTE",
		2: "TRANSACTION_TYPE_PROPOSAL",
		3: "TRANSACTION_TYPE_IBC_TRANSFER",
		4: "TRANSACTION_TYPE_THOR_MERGE",
		5: "TRANSACTION_TYPE_THOR_UNMERGE",
		6: "TRANSACTION_TYPE_TON_DEPOSIT",
		7: "TRANSACTION_TYPE_TON_WITHDRAW",
		8: "TRANSACTION_TYPE_GENERIC_CONTRACT",
	}
	TransactionType_value = map[string]int32{
		"TRANSACTION_TYPE_UNSPECIFIED":      0,
		"TRANSACTION_TYPE_VOTE":             1,
		"TRANSACTION_TYPE_PROPOSAL":         2,
		"TRANSACTION_TYPE_IBC_TRANSFER":     3,
		"TRANSACTION_TYPE_THOR_MERGE":       4,
		"TRANSACTION_TYPE_THOR_UNMERGE":     5,
		"TRANSACTION_TYPE_TON_DEPOSIT":      6,
		"TRANSACTION_TYPE_TON_WITHDRAW":     7,
		"TRANSACTION_TYPE_GENERIC_CONTRACT": 8,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_vultisig_keysign_v1_blockchain_specific_proto_enumTypes[0].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_vultisig_keysign_v1_blockchain_specific_proto_enumTypes[0]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_blockchain_specific_proto_rawDescGZIP(), []int{0}
}

type UTXOSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByteFee       string  `protobuf:"bytes,1,opt,name=byte_fee,json=byteFee,proto3" json:"byte_fee,omitempty"`
	SendMaxAmount bool    `protobuf:"varint,2,opt,name=send_max_amount,json=sendMaxAmount,proto3" json:"send_max_amount,omitempty"`
	Psbt          *string `protobuf:"bytes,3,opt,name=psbt,proto3,oneof" json:"psbt,omitempty"`
}

func (x *UTXOSpecific) Reset() {
	*x = UTXOSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UTXOSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTXOSpecific) ProtoMessage() {}

func (x *UTXOSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTXOSpecific.ProtoReflect.Descriptor instead.
func (*UTXOSpecific) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_blockchain_specific_proto_rawDescGZIP(), []int{0}
}

func (x *UTXOSpecific) GetByteFee() string {
	if x != nil {
		return x.ByteFee
	}
	return ""
}

func (x *UTXOSpecific) GetSendMaxAmount() bool {
	if x != nil {
		return x.SendMaxAmount
	}
	return false
}

func (x *UTXOSpecific) GetPsbt() string {
	if x != nil && x.Psbt != nil {
		return *x.Psbt
	}
	return ""
}

type CardanoChainSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByteFee       int64  `protobuf:"varint,1,opt,name=byte_fee,json=byteFee,proto3" json:"byte_fee,omitempty"`
	SendMaxAmount bool   `protobuf:"varint,2,opt,name=send_max_amount,json=sendMaxAmount,proto3" json:"send_max_amount,omitempty"`
	Ttl           uint64 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"` // Add TTL parameter
}

func (x *CardanoChainSpecific) Reset() {
	*x = CardanoChainSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoChainSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoChainSpecific) ProtoMessage() {}

func (x *CardanoChainSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoChainSpecific.ProtoReflect.Descriptor instead.
func (*CardanoChainSpecific) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_blockchain_specific_proto_rawDescGZIP(), []int{1}
}

func (x *CardanoChainSpecific) GetByteFee() int64 {
	if x != nil {
		return x.ByteFee
	}
	return 0
}

func (x *CardanoChainSpecific) GetSendMaxAmount() bool {
	if x != nil {
		return x.SendMaxAmount
	}
	return false
}

func (x *CardanoChainSpecific) GetTtl() uint64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type EthereumSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxFeePerGasWei string `protobuf:"bytes,1,opt,name=max_fee_per_gas_wei,json=maxFeePerGasWei,proto3" json:"max_fee_per_gas_wei,omitempty"`
	PriorityFee     string `protobuf:"bytes,2,opt,name=priority_fee,json=priorityFee,proto3" json:"priority_fee,omitempty"`
	Nonce           int64  `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasLimit        string `protobuf:"bytes,4,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
}

func (x *EthereumSpecific) Reset() {
	*x = EthereumSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumSpecific) ProtoMessage() {}

func (x *EthereumSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumSpecific.ProtoReflect.Descriptor instead.
func (*EthereumSpecific) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_blockchain_specific_proto_rawDescGZIP(), []int{2}
}

func (x *EthereumSpecific) GetMaxFeePerGasWei() string {
	if x != nil {
		return x.MaxFeePerGasWei
	}
	return ""
}

func (x *EthereumSpecific) GetPriorityFee() string {
	if x != nil {
		return x.PriorityFee
	}
	return ""
}

func (x *EthereumSpecific) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *EthereumSpecific) GetGasLimit() string {
	if x != nil {
		return x.GasLimit
	}
	return ""
}

type THORChainSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountNumber   uint64          `protobuf:"varint,1,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	Sequence        uint64          `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Fee             uint64          `protobuf:"varint,3,opt,name=fee,proto3" json:"fee,omitempty"`
	IsDeposit       bool            `protobuf:"varint,4,opt,name=is_deposit,json=isDeposit,proto3" json:"is_deposit,omitempty"`
	TransactionType TransactionType `protobuf:"varint,5,opt,name=transaction_type,json=transactionType,proto3,enum=vultisig.keysign.v1.TransactionType" json:"transaction_type,omitempty"`
}

func (x *THORChainSpecific) Reset() {
	*x = THORChainSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *THORChainSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*THORChainSpecific) ProtoMessage() {}

func (x *THORChainSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use THORChainSpecific.ProtoReflect.Descriptor instead.
func (*THORChainSpecific) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_blockchain_specific_proto_rawDescGZIP(), []int{3}
}

func (x *THORChainSpecific) GetAccountNumber() uint64 {
	if x != nil {
		return x.AccountNumber
	}
	return 0
}

func (x *THORChainSpecific) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *THORChainSpecific) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *THORChainSpecific) GetIsDeposit() bool {
	if x != nil {
		return x.IsDeposit
	}
	return false
}

func (x *THORChainSpecific) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_TRANSACTION_TYPE_UNSPECIFIED
}

type MAYAChainSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountNumber uint64 `protobuf:"varint,1,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	Sequence      uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	IsDeposit     bool   `protobuf:"varint,3,opt,name=is_deposit,json=isDeposit,proto3" json:"is_deposit,omitempty"`
}

func (x *MAYAChainSpecific) Reset() {
	*x = MAYAChainSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MAYAChainSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MAYAChainSpecific) ProtoMessage() {}

func (x *MAYAChainSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MAYAChainSpecific.ProtoReflect.Descriptor instead.
func (*MAYAChainSpecific) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_blockchain_specific_proto_rawDescGZIP(), []int{4}
}

func (x *MAYAChainSpecific) GetAccountNumber() uint64 {
	if x != nil {
		return x.AccountNumber
	}
	return 0
}

func (x *MAYAChainSpecific) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *MAYAChainSpecific) GetIsDeposit() bool {
	if x != nil {
		return x.IsDeposit
	}
	return false
}

type CosmosSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountNumber   uint64               `protobuf:"varint,1,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	Sequence        uint64               `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Gas             uint64               `protobuf:"varint,3,opt,name=gas,proto3" json:"gas,omitempty"`
	TransactionType TransactionType      `protobuf:"varint,4,opt,name=transaction_type,json=transactionType,proto3,enum=vultisig.keysign.v1.TransactionType" json:"transaction_type,omitempty"`
	IbcDenomTraces  *CosmosIbcDenomTrace `protobuf:"bytes,5,opt,name=ibc_denom_traces,json=ibcDenomTraces,proto3,oneof" json:"ibc_denom_traces,omitempty"`
	IbcInfo         *CosmosIbcInfo       `protobuf:"bytes,6,opt,name=ibc_info,json=ibcInfo,proto3,oneof" json:"ibc_info,omitempty"`
}

func (x *CosmosSpecific) Reset() {
	*x = CosmosSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CosmosSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosmosSpecific) ProtoMessage() {}

func (x *CosmosSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosmosSpecific.ProtoReflect.Descriptor instead.
func (*CosmosSpecific) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_blockchain_specific_proto_rawDescGZIP(), []int{5}
}

func (x *CosmosSpecific) GetAccountNumber() uint64 {
	if x != nil {
		return x.AccountNumber
	}
	return 0
}

func (x *CosmosSpecific) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *CosmosSpecific) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *CosmosSpecific) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_TRANSACTION_TYPE_UNSPECIFIED
}

func (x *CosmosSpecific) GetIbcDenomTraces() *CosmosIbcDenomTrace {
	if x != nil {
		return x.IbcDenomTraces
	}
	return nil
}

func (x *CosmosSpecific) GetIbcInfo() *CosmosIbcInfo {
	if x != nil {
		return x.IbcInfo
	}
	return nil
}

type CosmosIbcDenomTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path        string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	BaseDenom   string `protobuf:"bytes,2,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	LatestBlock string `protobuf:"bytes,3,opt,name=latest_block,json=latestBlock,proto3" json:"latest_block,omitempty"`
}

func (x *CosmosIbcDenomTrace) Reset() {
	*x = CosmosIbcDenomTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CosmosIbcDenomTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosmosIbcDenomTrace) ProtoMessage() {}

func (x *CosmosIbcDenomTrace) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosmosIbcDenomTrace.ProtoReflect.Descriptor instead.
func (*CosmosIbcDenomTrace) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_blockchain_specific_proto_rawDescGZIP(), []int{6}
}

func (x *CosmosIbcDenomTrace) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CosmosIbcDenomTrace) GetBaseDenom() string {
	if x != nil {
		return x.BaseDenom
	}
	return ""
}

func (x *CosmosIbcDenomTrace) GetLatestBlock() string {
	if x != nil {
		return x.LatestBlock
	}
	return ""
}

type CosmosIbcInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourcePort     string `protobuf:"bytes,1,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	SourceChannel  string `protobuf:"bytes,2,opt,name=source_channel,json=sourceChannel,proto3" json:"source_channel,omitempty"`
	RevisionNumber uint64 `protobuf:"varint,3,opt,name=revision_number,json=revisionNumber,proto3" json:"revision_number,omitempty"`
	RevisionHeight uint64 `protobuf:"varint,4,opt,name=revision_height,json=revisionHeight,proto3" json:"revision_height,omitempty"`
}

func (x *CosmosIbcInfo) Reset() {
	*x = CosmosIbcInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CosmosIbcInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosmosIbcInfo) ProtoMessage() {}

func (x *CosmosIbcInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosmosIbcInfo.ProtoReflect.Descriptor instead.
func (*CosmosIbcInfo) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_blockchain_specific_proto_rawDescGZIP(), []int{7}
}

func (x *CosmosIbcInfo) GetSourcePort() string {
	if x != nil {
		return x.SourcePort
	}
	return ""
}

func (x *CosmosIbcInfo) GetSourceChannel() string {
	if x != nil {
		return x.SourceChannel
	}
	return ""
}

func (x *CosmosIbcInfo) GetRevisionNumber() uint64 {
	if x != nil {
		return x.RevisionNumber
	}
	return 0
}

func (x *CosmosIbcInfo) GetRevisionHeight() uint64 {
	if x != nil {
		return x.RevisionHeight
	}
	return 0
}

type SolanaSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecentBlockHash            string  `protobuf:"bytes,1,opt,name=recent_block_hash,json=recentBlockHash,proto3" json:"recent_block_hash,omitempty"`
	PriorityFee                string  `protobuf:"bytes,2,opt,name=priority_fee,json=priorityFee,proto3" json:"priority_fee,omitempty"`
	FromTokenAssociatedAddress *string `protobuf:"bytes,3,opt,name=from_token_associated_address,json=fromTokenAssociatedAddress,proto3,oneof" json:"from_token_associated_address,omitempty"`
	ToTokenAssociatedAddress   *string `protobuf:"bytes,4,opt,name=to_token_associated_address,json=toTokenAssociatedAddress,proto3,oneof" json:"to_token_associated_address,omitempty"`
	ProgramId                  *bool   `protobuf:"varint,5,opt,name=program_id,json=programId,proto3,oneof" json:"program_id,omitempty"`
}

func (x *SolanaSpecific) Reset() {
	*x = SolanaSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaSpecific) ProtoMessage() {}

func (x *SolanaSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaSpecific.ProtoReflect.Descriptor instead.
func (*SolanaSpecific) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_blockchain_specific_proto_rawDescGZIP(), []int{8}
}

func (x *SolanaSpecific) GetRecentBlockHash() string {
	if x != nil {
		return x.RecentBlockHash
	}
	return ""
}

func (x *SolanaSpecific) GetPriorityFee() string {
	if x != nil {
		return x.PriorityFee
	}
	return ""
}

func (x *SolanaSpecific) GetFromTokenAssociatedAddress() string {
	if x != nil && x.FromTokenAssociatedAddress != nil {
		return *x.FromTokenAssociatedAddress
	}
	return ""
}

func (x *SolanaSpecific) GetToTokenAssociatedAddress() string {
	if x != nil && x.ToTokenAssociatedAddress != nil {
		return *x.ToTokenAssociatedAddress
	}
	return ""
}

func (x *SolanaSpecific) GetProgramId() bool {
	if x != nil && x.ProgramId != nil {
		return *x.ProgramId
	}
	return false
}

type PolkadotSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecentBlockHash    string `protobuf:"bytes,1,opt,name=recent_block_hash,json=recentBlockHash,proto3" json:"recent_block_hash,omitempty"`
	Nonce              uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	CurrentBlockNumber string `protobuf:"bytes,3,opt,name=current_block_number,json=currentBlockNumber,proto3" json:"current_block_number,omitempty"`
	SpecVersion        uint32 `protobuf:"varint,4,opt,name=spec_version,json=specVersion,proto3" json:"spec_version,omitempty"`
	TransactionVersion uint32 `protobuf:"varint,5,opt,name=transaction_version,json=transactionVersion,proto3" json:"transaction_version,omitempty"`
	GenesisHash        string `protobuf:"bytes,6,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty"`
}

func (x *PolkadotSpecific) Reset() {
	*x = PolkadotSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolkadotSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolkadotSpecific) ProtoMessage() {}

func (x *PolkadotSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolkadotSpecific.ProtoReflect.Descriptor instead.
func (*PolkadotSpecific) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_blockchain_specific_proto_rawDescGZIP(), []int{9}
}

func (x *PolkadotSpecific) GetRecentBlockHash() string {
	if x != nil {
		return x.RecentBlockHash
	}
	return ""
}

func (x *PolkadotSpecific) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *PolkadotSpecific) GetCurrentBlockNumber() string {
	if x != nil {
		return x.CurrentBlockNumber
	}
	return ""
}

func (x *PolkadotSpecific) GetSpecVersion() uint32 {
	if x != nil {
		return x.SpecVersion
	}
	return 0
}

func (x *PolkadotSpecific) GetTransactionVersion() uint32 {
	if x != nil {
		return x.TransactionVersion
	}
	return 0
}

func (x *PolkadotSpecific) GetGenesisHash() string {
	if x != nil {
		return x.GenesisHash
	}
	return ""
}

type SuiCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinType            string `protobuf:"bytes,1,opt,name=coin_type,json=coinType,proto3" json:"coin_type,omitempty"`
	CoinObjectId        string `protobuf:"bytes,2,opt,name=coin_object_id,json=coinObjectId,proto3" json:"coin_object_id,omitempty"`
	Version             string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Digest              string `protobuf:"bytes,4,opt,name=digest,proto3" json:"digest,omitempty"`
	Balance             string `protobuf:"bytes,5,opt,name=balance,proto3" json:"balance,omitempty"`
	PreviousTransaction string `protobuf:"bytes,6,opt,name=previous_transaction,json=previousTransaction,proto3" json:"previous_transaction,omitempty"`
}

func (x *SuiCoin) Reset() {
	*x = SuiCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiCoin) ProtoMessage() {}

func (x *SuiCoin) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiCoin.ProtoReflect.Descriptor instead.
func (*SuiCoin) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_blockchain_specific_proto_rawDescGZIP(), []int{10}
}

func (x *SuiCoin) GetCoinType() string {
	if x != nil {
		return x.CoinType
	}
	return ""
}

func (x *SuiCoin) GetCoinObjectId() string {
	if x != nil {
		return x.CoinObjectId
	}
	return ""
}

func (x *SuiCoin) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SuiCoin) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *SuiCoin) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *SuiCoin) GetPreviousTransaction() string {
	if x != nil {
		return x.PreviousTransaction
	}
	return ""
}

type SuiSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceGasPrice string     `protobuf:"bytes,1,opt,name=reference_gas_price,json=referenceGasPrice,proto3" json:"reference_gas_price,omitempty"`
	Coins             []*SuiCoin `protobuf:"bytes,2,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *SuiSpecific) Reset() {
	*x = SuiSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiSpecific) ProtoMessage() {}

func (x *SuiSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiSpecific.ProtoReflect.Descriptor instead.
func (*SuiSpecific) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_blockchain_specific_proto_rawDescGZIP(), []int{11}
}

func (x *SuiSpecific) GetReferenceGasPrice() string {
	if x != nil {
		return x.ReferenceGasPrice
	}
	return ""
}

func (x *SuiSpecific) GetCoins() []*SuiCoin {
	if x != nil {
		return x.Coins
	}
	return nil
}

type TonSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber      uint64 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ExpireAt            uint64 `protobuf:"varint,2,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	Bounceable          bool   `protobuf:"varint,3,opt,name=bounceable,proto3" json:"bounceable,omitempty"`
	SendMaxAmount       bool   `protobuf:"varint,4,opt,name=send_max_amount,json=sendMaxAmount,proto3" json:"send_max_amount,omitempty"`
	JettonAddress       string `protobuf:"bytes,5,opt,name=jetton_address,json=jettonAddress,proto3" json:"jetton_address,omitempty"`
	IsActiveDestination bool   `protobuf:"varint,6,opt,name=is_active_destination,json=isActiveDestination,proto3" json:"is_active_destination,omitempty"`
}

func (x *TonSpecific) Reset() {
	*x = TonSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TonSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TonSpecific) ProtoMessage() {}

func (x *TonSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TonSpecific.ProtoReflect.Descriptor instead.
func (*TonSpecific) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_blockchain_specific_proto_rawDescGZIP(), []int{12}
}

func (x *TonSpecific) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *TonSpecific) GetExpireAt() uint64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *TonSpecific) GetBounceable() bool {
	if x != nil {
		return x.Bounceable
	}
	return false
}

func (x *TonSpecific) GetSendMaxAmount() bool {
	if x != nil {
		return x.SendMaxAmount
	}
	return false
}

func (x *TonSpecific) GetJettonAddress() string {
	if x != nil {
		return x.JettonAddress
	}
	return ""
}

func (x *TonSpecific) GetIsActiveDestination() bool {
	if x != nil {
		return x.IsActiveDestination
	}
	return false
}

type RippleSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence           uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Gas                uint64 `protobuf:"varint,2,opt,name=gas,proto3" json:"gas,omitempty"`
	LastLedgerSequence uint64 `protobuf:"varint,3,opt,name=last_ledger_sequence,json=lastLedgerSequence,proto3" json:"last_ledger_sequence,omitempty"`
}

func (x *RippleSpecific) Reset() {
	*x = RippleSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RippleSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RippleSpecific) ProtoMessage() {}

func (x *RippleSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RippleSpecific.ProtoReflect.Descriptor instead.
func (*RippleSpecific) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_blockchain_specific_proto_rawDescGZIP(), []int{13}
}

func (x *RippleSpecific) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *RippleSpecific) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *RippleSpecific) GetLastLedgerSequence() uint64 {
	if x != nil {
		return x.LastLedgerSequence
	}
	return 0
}

type TronSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp                 uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Expiration                uint64 `protobuf:"varint,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
	BlockHeaderTimestamp      uint64 `protobuf:"varint,3,opt,name=block_header_timestamp,json=blockHeaderTimestamp,proto3" json:"block_header_timestamp,omitempty"`
	BlockHeaderNumber         uint64 `protobuf:"varint,4,opt,name=block_header_number,json=blockHeaderNumber,proto3" json:"block_header_number,omitempty"`
	BlockHeaderVersion        uint64 `protobuf:"varint,5,opt,name=block_header_version,json=blockHeaderVersion,proto3" json:"block_header_version,omitempty"`
	BlockHeaderTxTrieRoot     string `protobuf:"bytes,6,opt,name=block_header_tx_trie_root,json=blockHeaderTxTrieRoot,proto3" json:"block_header_tx_trie_root,omitempty"`
	BlockHeaderParentHash     string `protobuf:"bytes,7,opt,name=block_header_parent_hash,json=blockHeaderParentHash,proto3" json:"block_header_parent_hash,omitempty"`
	BlockHeaderWitnessAddress string `protobuf:"bytes,8,opt,name=block_header_witness_address,json=blockHeaderWitnessAddress,proto3" json:"block_header_witness_address,omitempty"`
	GasEstimation             uint64 `protobuf:"varint,9,opt,name=gas_estimation,json=gasEstimation,proto3" json:"gas_estimation,omitempty"`
}

func (x *TronSpecific) Reset() {
	*x = TronSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TronSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TronSpecific) ProtoMessage() {}

func (x *TronSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TronSpecific.ProtoReflect.Descriptor instead.
func (*TronSpecific) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_blockchain_specific_proto_rawDescGZIP(), []int{14}
}

func (x *TronSpecific) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TronSpecific) GetExpiration() uint64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *TronSpecific) GetBlockHeaderTimestamp() uint64 {
	if x != nil {
		return x.BlockHeaderTimestamp
	}
	return 0
}

func (x *TronSpecific) GetBlockHeaderNumber() uint64 {
	if x != nil {
		return x.BlockHeaderNumber
	}
	return 0
}

func (x *TronSpecific) GetBlockHeaderVersion() uint64 {
	if x != nil {
		return x.BlockHeaderVersion
	}
	return 0
}

func (x *TronSpecific) GetBlockHeaderTxTrieRoot() string {
	if x != nil {
		return x.BlockHeaderTxTrieRoot
	}
	return ""
}

func (x *TronSpecific) GetBlockHeaderParentHash() string {
	if x != nil {
		return x.BlockHeaderParentHash
	}
	return ""
}

func (x *TronSpecific) GetBlockHeaderWitnessAddress() string {
	if x != nil {
		return x.BlockHeaderWitnessAddress
	}
	return ""
}

func (x *TronSpecific) GetGasEstimation() uint64 {
	if x != nil {
		return x.GasEstimation
	}
	return 0
}

var File_vultisig_keysign_v1_blockchain_specific_proto protoreflect.FileDescriptor

var file_vultisig_keysign_v1_blockchain_specific_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x69,
	0x67, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x13, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67,
	0x6e, 0x2e, 0x76, 0x31, 0x22, 0x73, 0x0a, 0x0c, 0x55, 0x54, 0x58, 0x4f, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x61,
	0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x73, 0x62, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x73, 0x62, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x73, 0x62, 0x74, 0x22, 0x6b, 0x0a, 0x14, 0x43, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x13, 0x6d,
	0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x77,
	0x65, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65,
	0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x57, 0x65, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0xd8, 0x01, 0x0a, 0x11, 0x54, 0x48, 0x4f, 0x52, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x4f, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x75, 0x0a, 0x11, 0x4d, 0x41,
	0x59, 0x41, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x22, 0xf5, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x69, 0x62,
	0x63, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x49, 0x62, 0x63, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x69, 0x62, 0x63, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x08, 0x69, 0x62, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x49, 0x62, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x07, 0x69, 0x62, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x62, 0x63, 0x5f,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x69, 0x62, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x6b, 0x0a, 0x13, 0x43, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x49, 0x62, 0x63, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x6e,
	0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x44, 0x65,
	0x6e, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x49, 0x62, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0xe0, 0x02, 0x0a, 0x0e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x65, 0x12, 0x46, 0x0a, 0x1d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1a, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x1b,
	0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x18, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x22, 0xfd, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64,
	0x6f, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0xcb, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x69, 0x43, 0x6f, 0x69,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x31, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x0b, 0x53, 0x75, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x0b, 0x54, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6a, 0x65,
	0x74, 0x74, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x70, 0x0a, 0x0e, 0x52, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x67, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6c,
	0x61, 0x73, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0xbf, 0x03, 0x0a, 0x0c, 0x54, 0x72, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x16, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x19, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x78, 0x5f, 0x74, 0x72, 0x69, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x78, 0x54, 0x72, 0x69, 0x65, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3f, 0x0a, 0x1c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x57, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x67, 0x61, 0x73, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x67, 0x61, 0x73, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2a, 0xc0, 0x02, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x42, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x4f, 0x52, 0x5f,
	0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x4f, 0x52,
	0x5f, 0x55, 0x4e, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10, 0x07, 0x12,
	0x25, 0x0a, 0x21, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x10, 0x08, 0x42, 0x54, 0x0a, 0x13, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x5a, 0x38, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x67, 0x6f,
	0x2f, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67,
	0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0xba, 0x02, 0x02, 0x56, 0x53, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vultisig_keysign_v1_blockchain_specific_proto_rawDescOnce sync.Once
	file_vultisig_keysign_v1_blockchain_specific_proto_rawDescData = file_vultisig_keysign_v1_blockchain_specific_proto_rawDesc
)

func file_vultisig_keysign_v1_blockchain_specific_proto_rawDescGZIP() []byte {
	file_vultisig_keysign_v1_blockchain_specific_proto_rawDescOnce.Do(func() {
		file_vultisig_keysign_v1_blockchain_specific_proto_rawDescData = protoimpl.X.CompressGZIP(file_vultisig_keysign_v1_blockchain_specific_proto_rawDescData)
	})
	return file_vultisig_keysign_v1_blockchain_specific_proto_rawDescData
}

var file_vultisig_keysign_v1_blockchain_specific_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_vultisig_keysign_v1_blockchain_specific_proto_goTypes = []any{
	(TransactionType)(0),         // 0: vultisig.keysign.v1.TransactionType
	(*UTXOSpecific)(nil),         // 1: vultisig.keysign.v1.UTXOSpecific
	(*CardanoChainSpecific)(nil), // 2: vultisig.keysign.v1.CardanoChainSpecific
	(*EthereumSpecific)(nil),     // 3: vultisig.keysign.v1.EthereumSpecific
	(*THORChainSpecific)(nil),    // 4: vultisig.keysign.v1.THORChainSpecific
	(*MAYAChainSpecific)(nil),    // 5: vultisig.keysign.v1.MAYAChainSpecific
	(*CosmosSpecific)(nil),       // 6: vultisig.keysign.v1.CosmosSpecific
	(*CosmosIbcDenomTrace)(nil),  // 7: vultisig.keysign.v1.CosmosIbcDenomTrace
	(*CosmosIbcInfo)(nil),        // 8: vultisig.keysign.v1.CosmosIbcInfo
	(*SolanaSpecific)(nil),       // 9: vultisig.keysign.v1.SolanaSpecific
	(*PolkadotSpecific)(nil),     // 10: vultisig.keysign.v1.PolkadotSpecific
	(*SuiCoin)(nil),              // 11: vultisig.keysign.v1.SuiCoin
	(*SuiSpecific)(nil),          // 12: vultisig.keysign.v1.SuiSpecific
	(*TonSpecific)(nil),          // 13: vultisig.keysign.v1.TonSpecific
	(*RippleSpecific)(nil),       // 14: vultisig.keysign.v1.RippleSpecific
	(*TronSpecific)(nil),         // 15: vultisig.keysign.v1.TronSpecific
}
var file_vultisig_keysign_v1_blockchain_specific_proto_depIdxs = []int32{
	0,  // 0: vultisig.keysign.v1.THORChainSpecific.transaction_type:type_name -> vultisig.keysign.v1.TransactionType
	0,  // 1: vultisig.keysign.v1.CosmosSpecific.transaction_type:type_name -> vultisig.keysign.v1.TransactionType
	7,  // 2: vultisig.keysign.v1.CosmosSpecific.ibc_denom_traces:type_name -> vultisig.keysign.v1.CosmosIbcDenomTrace
	8,  // 3: vultisig.keysign.v1.CosmosSpecific.ibc_info:type_name -> vultisig.keysign.v1.CosmosIbcInfo
	11, // 4: vultisig.keysign.v1.SuiSpecific.coins:type_name -> vultisig.keysign.v1.SuiCoin
	5,  // [5:5] is the sub-list for method output_type
	5,  // [5:5] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_vultisig_keysign_v1_blockchain_specific_proto_init() }
func file_vultisig_keysign_v1_blockchain_specific_proto_init() {
	if File_vultisig_keysign_v1_blockchain_specific_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*UTXOSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CardanoChainSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*EthereumSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*THORChainSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MAYAChainSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CosmosSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CosmosIbcDenomTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CosmosIbcInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SolanaSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PolkadotSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SuiCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SuiSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*TonSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*RippleSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*TronSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[0].OneofWrappers = []any{}
	file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[5].OneofWrappers = []any{}
	file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vultisig_keysign_v1_blockchain_specific_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vultisig_keysign_v1_blockchain_specific_proto_goTypes,
		DependencyIndexes: file_vultisig_keysign_v1_blockchain_specific_proto_depIdxs,
		EnumInfos:         file_vultisig_keysign_v1_blockchain_specific_proto_enumTypes,
		MessageInfos:      file_vultisig_keysign_v1_blockchain_specific_proto_msgTypes,
	}.Build()
	File_vultisig_keysign_v1_blockchain_specific_proto = out.File
	file_vultisig_keysign_v1_blockchain_specific_proto_rawDesc = nil
	file_vultisig_keysign_v1_blockchain_specific_proto_goTypes = nil
	file_vultisig_keysign_v1_blockchain_specific_proto_depIdxs = nil
}
