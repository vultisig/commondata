// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: vultisig/keysign/v1/keysign_message.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KeysignMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId            string                `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ServiceName          string                `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	EncryptionKeyHex     string                `protobuf:"bytes,4,opt,name=encryption_key_hex,json=encryptionKeyHex,proto3" json:"encryption_key_hex,omitempty"`
	KeysignPayload       *KeysignPayload       `protobuf:"bytes,5,opt,name=keysign_payload,json=keysignPayload,proto3" json:"keysign_payload,omitempty"`
	UseVultisigRelay     bool                  `protobuf:"varint,6,opt,name=use_vultisig_relay,json=useVultisigRelay,proto3" json:"use_vultisig_relay,omitempty"`
	PayloadId            string                `protobuf:"bytes,7,opt,name=payload_id,json=payloadId,proto3" json:"payload_id,omitempty"`
	CustomMessagePayload *CustomMessagePayload `protobuf:"bytes,8,opt,name=custom_message_payload,json=customMessagePayload,proto3,oneof" json:"custom_message_payload,omitempty"`
}

func (x *KeysignMessage) Reset() {
	*x = KeysignMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v1_keysign_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysignMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysignMessage) ProtoMessage() {}

func (x *KeysignMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v1_keysign_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysignMessage.ProtoReflect.Descriptor instead.
func (*KeysignMessage) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_keysign_message_proto_rawDescGZIP(), []int{0}
}

func (x *KeysignMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *KeysignMessage) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *KeysignMessage) GetEncryptionKeyHex() string {
	if x != nil {
		return x.EncryptionKeyHex
	}
	return ""
}

func (x *KeysignMessage) GetKeysignPayload() *KeysignPayload {
	if x != nil {
		return x.KeysignPayload
	}
	return nil
}

func (x *KeysignMessage) GetUseVultisigRelay() bool {
	if x != nil {
		return x.UseVultisigRelay
	}
	return false
}

func (x *KeysignMessage) GetPayloadId() string {
	if x != nil {
		return x.PayloadId
	}
	return ""
}

func (x *KeysignMessage) GetCustomMessagePayload() *CustomMessagePayload {
	if x != nil {
		return x.CustomMessagePayload
	}
	return nil
}

type KeysignPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin      *Coin  `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin,omitempty"`
	ToAddress string `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	ToAmount  string `protobuf:"bytes,3,opt,name=to_amount,json=toAmount,proto3" json:"to_amount,omitempty"`
	// Types that are assignable to BlockchainSpecific:
	//
	//	*KeysignPayload_UtxoSpecific
	//	*KeysignPayload_EthereumSpecific
	//	*KeysignPayload_ThorchainSpecific
	//	*KeysignPayload_MayaSpecific
	//	*KeysignPayload_CosmosSpecific
	//	*KeysignPayload_SolanaSpecific
	//	*KeysignPayload_PolkadotSpecific
	//	*KeysignPayload_SuicheSpecific
	//	*KeysignPayload_TonSpecific
	//	*KeysignPayload_RippleSpecific
	//	*KeysignPayload_TronSpecific
	//	*KeysignPayload_Cardano
	BlockchainSpecific isKeysignPayload_BlockchainSpecific `protobuf_oneof:"blockchain_specific"`
	UtxoInfo           []*UtxoInfo                         `protobuf:"bytes,20,rep,name=utxo_info,json=utxoInfo,proto3" json:"utxo_info,omitempty"`
	Memo               *string                             `protobuf:"bytes,21,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
	// Types that are assignable to SwapPayload:
	//
	//	*KeysignPayload_ThorchainSwapPayload
	//	*KeysignPayload_MayachainSwapPayload
	//	*KeysignPayload_OneinchSwapPayload
	//	*KeysignPayload_KyberswapSwapPayload
	SwapPayload         isKeysignPayload_SwapPayload `protobuf_oneof:"swap_payload"`
	Erc20ApprovePayload *Erc20ApprovePayload         `protobuf:"bytes,30,opt,name=erc20_approve_payload,json=erc20ApprovePayload,proto3,oneof" json:"erc20_approve_payload,omitempty"`
	VaultPublicKeyEcdsa string                       `protobuf:"bytes,31,opt,name=vault_public_key_ecdsa,json=vaultPublicKeyEcdsa,proto3" json:"vault_public_key_ecdsa,omitempty"`
	VaultLocalPartyId   string                       `protobuf:"bytes,32,opt,name=vault_local_party_id,json=vaultLocalPartyId,proto3" json:"vault_local_party_id,omitempty"`
	LibType             string                       `protobuf:"bytes,33,opt,name=lib_type,json=libType,proto3" json:"lib_type,omitempty"`
	SkipBroadcast       *bool                        `protobuf:"varint,34,opt,name=skip_broadcast,json=skipBroadcast,proto3,oneof" json:"skip_broadcast,omitempty"`
	// Types that are assignable to ContractPayload:
	//
	//	*KeysignPayload_WasmExecuteContractPayload
	//	*KeysignPayload_TronTransferContractPayload
	//	*KeysignPayload_TronTriggerSmartContractPayload
	//	*KeysignPayload_TronTransferAssetContractPayload
	ContractPayload isKeysignPayload_ContractPayload `protobuf_oneof:"contract_payload"`
}

func (x *KeysignPayload) Reset() {
	*x = KeysignPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v1_keysign_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysignPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysignPayload) ProtoMessage() {}

func (x *KeysignPayload) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v1_keysign_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysignPayload.ProtoReflect.Descriptor instead.
func (*KeysignPayload) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_keysign_message_proto_rawDescGZIP(), []int{1}
}

func (x *KeysignPayload) GetCoin() *Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

func (x *KeysignPayload) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *KeysignPayload) GetToAmount() string {
	if x != nil {
		return x.ToAmount
	}
	return ""
}

func (m *KeysignPayload) GetBlockchainSpecific() isKeysignPayload_BlockchainSpecific {
	if m != nil {
		return m.BlockchainSpecific
	}
	return nil
}

func (x *KeysignPayload) GetUtxoSpecific() *UTXOSpecific {
	if x, ok := x.GetBlockchainSpecific().(*KeysignPayload_UtxoSpecific); ok {
		return x.UtxoSpecific
	}
	return nil
}

func (x *KeysignPayload) GetEthereumSpecific() *EthereumSpecific {
	if x, ok := x.GetBlockchainSpecific().(*KeysignPayload_EthereumSpecific); ok {
		return x.EthereumSpecific
	}
	return nil
}

func (x *KeysignPayload) GetThorchainSpecific() *THORChainSpecific {
	if x, ok := x.GetBlockchainSpecific().(*KeysignPayload_ThorchainSpecific); ok {
		return x.ThorchainSpecific
	}
	return nil
}

func (x *KeysignPayload) GetMayaSpecific() *MAYAChainSpecific {
	if x, ok := x.GetBlockchainSpecific().(*KeysignPayload_MayaSpecific); ok {
		return x.MayaSpecific
	}
	return nil
}

func (x *KeysignPayload) GetCosmosSpecific() *CosmosSpecific {
	if x, ok := x.GetBlockchainSpecific().(*KeysignPayload_CosmosSpecific); ok {
		return x.CosmosSpecific
	}
	return nil
}

func (x *KeysignPayload) GetSolanaSpecific() *SolanaSpecific {
	if x, ok := x.GetBlockchainSpecific().(*KeysignPayload_SolanaSpecific); ok {
		return x.SolanaSpecific
	}
	return nil
}

func (x *KeysignPayload) GetPolkadotSpecific() *PolkadotSpecific {
	if x, ok := x.GetBlockchainSpecific().(*KeysignPayload_PolkadotSpecific); ok {
		return x.PolkadotSpecific
	}
	return nil
}

func (x *KeysignPayload) GetSuicheSpecific() *SuiSpecific {
	if x, ok := x.GetBlockchainSpecific().(*KeysignPayload_SuicheSpecific); ok {
		return x.SuicheSpecific
	}
	return nil
}

func (x *KeysignPayload) GetTonSpecific() *TonSpecific {
	if x, ok := x.GetBlockchainSpecific().(*KeysignPayload_TonSpecific); ok {
		return x.TonSpecific
	}
	return nil
}

func (x *KeysignPayload) GetRippleSpecific() *RippleSpecific {
	if x, ok := x.GetBlockchainSpecific().(*KeysignPayload_RippleSpecific); ok {
		return x.RippleSpecific
	}
	return nil
}

func (x *KeysignPayload) GetTronSpecific() *TronSpecific {
	if x, ok := x.GetBlockchainSpecific().(*KeysignPayload_TronSpecific); ok {
		return x.TronSpecific
	}
	return nil
}

func (x *KeysignPayload) GetCardano() *CardanoChainSpecific {
	if x, ok := x.GetBlockchainSpecific().(*KeysignPayload_Cardano); ok {
		return x.Cardano
	}
	return nil
}

func (x *KeysignPayload) GetUtxoInfo() []*UtxoInfo {
	if x != nil {
		return x.UtxoInfo
	}
	return nil
}

func (x *KeysignPayload) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

func (m *KeysignPayload) GetSwapPayload() isKeysignPayload_SwapPayload {
	if m != nil {
		return m.SwapPayload
	}
	return nil
}

func (x *KeysignPayload) GetThorchainSwapPayload() *THORChainSwapPayload {
	if x, ok := x.GetSwapPayload().(*KeysignPayload_ThorchainSwapPayload); ok {
		return x.ThorchainSwapPayload
	}
	return nil
}

func (x *KeysignPayload) GetMayachainSwapPayload() *THORChainSwapPayload {
	if x, ok := x.GetSwapPayload().(*KeysignPayload_MayachainSwapPayload); ok {
		return x.MayachainSwapPayload
	}
	return nil
}

func (x *KeysignPayload) GetOneinchSwapPayload() *OneInchSwapPayload {
	if x, ok := x.GetSwapPayload().(*KeysignPayload_OneinchSwapPayload); ok {
		return x.OneinchSwapPayload
	}
	return nil
}

func (x *KeysignPayload) GetKyberswapSwapPayload() *KyberSwapPayload {
	if x, ok := x.GetSwapPayload().(*KeysignPayload_KyberswapSwapPayload); ok {
		return x.KyberswapSwapPayload
	}
	return nil
}

func (x *KeysignPayload) GetErc20ApprovePayload() *Erc20ApprovePayload {
	if x != nil {
		return x.Erc20ApprovePayload
	}
	return nil
}

func (x *KeysignPayload) GetVaultPublicKeyEcdsa() string {
	if x != nil {
		return x.VaultPublicKeyEcdsa
	}
	return ""
}

func (x *KeysignPayload) GetVaultLocalPartyId() string {
	if x != nil {
		return x.VaultLocalPartyId
	}
	return ""
}

func (x *KeysignPayload) GetLibType() string {
	if x != nil {
		return x.LibType
	}
	return ""
}

func (x *KeysignPayload) GetSkipBroadcast() bool {
	if x != nil && x.SkipBroadcast != nil {
		return *x.SkipBroadcast
	}
	return false
}

func (m *KeysignPayload) GetContractPayload() isKeysignPayload_ContractPayload {
	if m != nil {
		return m.ContractPayload
	}
	return nil
}

func (x *KeysignPayload) GetWasmExecuteContractPayload() *WasmExecuteContractPayload {
	if x, ok := x.GetContractPayload().(*KeysignPayload_WasmExecuteContractPayload); ok {
		return x.WasmExecuteContractPayload
	}
	return nil
}

func (x *KeysignPayload) GetTronTransferContractPayload() *TronTransferContractPayload {
	if x, ok := x.GetContractPayload().(*KeysignPayload_TronTransferContractPayload); ok {
		return x.TronTransferContractPayload
	}
	return nil
}

func (x *KeysignPayload) GetTronTriggerSmartContractPayload() *TronTriggerSmartContractPayload {
	if x, ok := x.GetContractPayload().(*KeysignPayload_TronTriggerSmartContractPayload); ok {
		return x.TronTriggerSmartContractPayload
	}
	return nil
}

func (x *KeysignPayload) GetTronTransferAssetContractPayload() *TronTransferAssetContractPayload {
	if x, ok := x.GetContractPayload().(*KeysignPayload_TronTransferAssetContractPayload); ok {
		return x.TronTransferAssetContractPayload
	}
	return nil
}

type isKeysignPayload_BlockchainSpecific interface {
	isKeysignPayload_BlockchainSpecific()
}

type KeysignPayload_UtxoSpecific struct {
	UtxoSpecific *UTXOSpecific `protobuf:"bytes,4,opt,name=utxo_specific,json=utxoSpecific,proto3,oneof"`
}

type KeysignPayload_EthereumSpecific struct {
	EthereumSpecific *EthereumSpecific `protobuf:"bytes,5,opt,name=ethereum_specific,json=ethereumSpecific,proto3,oneof"`
}

type KeysignPayload_ThorchainSpecific struct {
	ThorchainSpecific *THORChainSpecific `protobuf:"bytes,6,opt,name=thorchain_specific,json=thorchainSpecific,proto3,oneof"`
}

type KeysignPayload_MayaSpecific struct {
	MayaSpecific *MAYAChainSpecific `protobuf:"bytes,7,opt,name=maya_specific,json=mayaSpecific,proto3,oneof"`
}

type KeysignPayload_CosmosSpecific struct {
	CosmosSpecific *CosmosSpecific `protobuf:"bytes,8,opt,name=cosmos_specific,json=cosmosSpecific,proto3,oneof"`
}

type KeysignPayload_SolanaSpecific struct {
	SolanaSpecific *SolanaSpecific `protobuf:"bytes,9,opt,name=solana_specific,json=solanaSpecific,proto3,oneof"`
}

type KeysignPayload_PolkadotSpecific struct {
	PolkadotSpecific *PolkadotSpecific `protobuf:"bytes,10,opt,name=polkadot_specific,json=polkadotSpecific,proto3,oneof"`
}

type KeysignPayload_SuicheSpecific struct {
	SuicheSpecific *SuiSpecific `protobuf:"bytes,11,opt,name=suiche_specific,json=suicheSpecific,proto3,oneof"`
}

type KeysignPayload_TonSpecific struct {
	TonSpecific *TonSpecific `protobuf:"bytes,12,opt,name=ton_specific,json=tonSpecific,proto3,oneof"`
}

type KeysignPayload_RippleSpecific struct {
	RippleSpecific *RippleSpecific `protobuf:"bytes,13,opt,name=ripple_specific,json=rippleSpecific,proto3,oneof"`
}

type KeysignPayload_TronSpecific struct {
	TronSpecific *TronSpecific `protobuf:"bytes,14,opt,name=tron_specific,json=tronSpecific,proto3,oneof"`
}

type KeysignPayload_Cardano struct {
	Cardano *CardanoChainSpecific `protobuf:"bytes,15,opt,name=cardano,proto3,oneof"`
}

func (*KeysignPayload_UtxoSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_EthereumSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_ThorchainSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_MayaSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_CosmosSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_SolanaSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_PolkadotSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_SuicheSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_TonSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_RippleSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_TronSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_Cardano) isKeysignPayload_BlockchainSpecific() {}

type isKeysignPayload_SwapPayload interface {
	isKeysignPayload_SwapPayload()
}

type KeysignPayload_ThorchainSwapPayload struct {
	ThorchainSwapPayload *THORChainSwapPayload `protobuf:"bytes,22,opt,name=thorchain_swap_payload,json=thorchainSwapPayload,proto3,oneof"`
}

type KeysignPayload_MayachainSwapPayload struct {
	MayachainSwapPayload *THORChainSwapPayload `protobuf:"bytes,23,opt,name=mayachain_swap_payload,json=mayachainSwapPayload,proto3,oneof"`
}

type KeysignPayload_OneinchSwapPayload struct {
	OneinchSwapPayload *OneInchSwapPayload `protobuf:"bytes,24,opt,name=oneinch_swap_payload,json=oneinchSwapPayload,proto3,oneof"`
}

type KeysignPayload_KyberswapSwapPayload struct {
	KyberswapSwapPayload *KyberSwapPayload `protobuf:"bytes,25,opt,name=kyberswap_swap_payload,json=kyberswapSwapPayload,proto3,oneof"`
}

func (*KeysignPayload_ThorchainSwapPayload) isKeysignPayload_SwapPayload() {}

func (*KeysignPayload_MayachainSwapPayload) isKeysignPayload_SwapPayload() {}

func (*KeysignPayload_OneinchSwapPayload) isKeysignPayload_SwapPayload() {}

func (*KeysignPayload_KyberswapSwapPayload) isKeysignPayload_SwapPayload() {}

type isKeysignPayload_ContractPayload interface {
	isKeysignPayload_ContractPayload()
}

type KeysignPayload_WasmExecuteContractPayload struct {
	WasmExecuteContractPayload *WasmExecuteContractPayload `protobuf:"bytes,35,opt,name=wasm_execute_contract_payload,json=wasmExecuteContractPayload,proto3,oneof"`
}

type KeysignPayload_TronTransferContractPayload struct {
	TronTransferContractPayload *TronTransferContractPayload `protobuf:"bytes,36,opt,name=tron_transfer_contract_payload,json=tronTransferContractPayload,proto3,oneof"`
}

type KeysignPayload_TronTriggerSmartContractPayload struct {
	TronTriggerSmartContractPayload *TronTriggerSmartContractPayload `protobuf:"bytes,37,opt,name=tron_trigger_smart_contract_payload,json=tronTriggerSmartContractPayload,proto3,oneof"`
}

type KeysignPayload_TronTransferAssetContractPayload struct {
	TronTransferAssetContractPayload *TronTransferAssetContractPayload `protobuf:"bytes,38,opt,name=tron_transfer_asset_contract_payload,json=tronTransferAssetContractPayload,proto3,oneof"`
}

func (*KeysignPayload_WasmExecuteContractPayload) isKeysignPayload_ContractPayload() {}

func (*KeysignPayload_TronTransferContractPayload) isKeysignPayload_ContractPayload() {}

func (*KeysignPayload_TronTriggerSmartContractPayload) isKeysignPayload_ContractPayload() {}

func (*KeysignPayload_TronTransferAssetContractPayload) isKeysignPayload_ContractPayload() {}

var File_vultisig_keysign_v1_keysign_message_proto protoreflect.FileDescriptor

var file_vultisig_keysign_v1_keysign_message_proto_rawDesc = []byte{
	0x0a, 0x29, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x69,
	0x67, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x76, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31,
	0x1a, 0x2c, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x69,
	0x67, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x31, 0x69, 0x6e, 0x63, 0x68, 0x5f, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d,
	0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x76,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x76,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2f, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x30, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x69,
	0x67, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x79, 0x62, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x30, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79,
	0x73, 0x69, 0x67, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x68, 0x6f, 0x72, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x6b,
	0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x74, 0x78, 0x6f, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x76, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x77,
	0x61, 0x73, 0x6d, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2f, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79,
	0x73, 0x69, 0x67, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x03, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x48, 0x65, 0x78, 0x12, 0x4c, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69,
	0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x76, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x75, 0x73, 0x65, 0x56, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x64, 0x12, 0x64, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x14,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x86, 0x13, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x48, 0x0a, 0x0d, 0x75, 0x74, 0x78, 0x6f, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x54,
	0x58, 0x4f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x74,
	0x78, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x54, 0x0a, 0x11, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x00, 0x52, 0x10,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x12, 0x57, 0x0a, 0x12, 0x74, 0x68, 0x6f, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x48, 0x4f, 0x52, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x48, 0x00, 0x52, 0x11, 0x74, 0x68, 0x6f, 0x72, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x4d, 0x0a, 0x0d, 0x6d, 0x61, 0x79,
	0x61, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x41, 0x59, 0x41, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x79, 0x61,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x4e, 0x0a, 0x0f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x54, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x6b,
	0x61, 0x64, 0x6f, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64,
	0x6f, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6f,
	0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x4b,
	0x0a, 0x0f, 0x73, 0x75, 0x69, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x75, 0x69,
	0x63, 0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x45, 0x0a, 0x0c, 0x74,
	0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x4e, 0x0a, 0x0f, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x48, 0x00, 0x52, 0x0e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x48, 0x0a, 0x0d, 0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x00, 0x52, 0x0c,
	0x74, 0x72, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x45, 0x0a, 0x07,
	0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x00, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x12, 0x3a, 0x0a, 0x09, 0x75, 0x74, 0x78, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x78,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x74, 0x78, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x17, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x16, 0x74, 0x68, 0x6f, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x48, 0x4f, 0x52, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x48, 0x01, 0x52, 0x14, 0x74, 0x68, 0x6f, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x61, 0x0a, 0x16, 0x6d,
	0x61, 0x79, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x48, 0x4f, 0x52, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x01, 0x52, 0x14, 0x6d, 0x61, 0x79, 0x61, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5b,
	0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x69, 0x6e, 0x63, 0x68, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x63, 0x68, 0x53, 0x77, 0x61, 0x70, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x01, 0x52, 0x12, 0x6f, 0x6e, 0x65, 0x69, 0x6e, 0x63, 0x68,
	0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x6b,
	0x79, 0x62, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x79, 0x62, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x48, 0x01, 0x52, 0x14, 0x6b, 0x79, 0x62, 0x65, 0x72, 0x73, 0x77, 0x61, 0x70, 0x53,
	0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x61, 0x0a, 0x15, 0x65, 0x72,
	0x63, 0x32, 0x30, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x72, 0x63, 0x32, 0x30, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x48, 0x04, 0x52, 0x13, 0x65, 0x72, 0x63, 0x32, 0x30, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x16, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x65, 0x63, 0x64, 0x73, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x45, 0x63, 0x64,
	0x73, 0x61, 0x12, 0x2f, 0x0a, 0x14, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x74, 0x0a, 0x1d, 0x77, 0x61,
	0x73, 0x6d, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x73, 0x6d, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x48, 0x02, 0x52, 0x1a, 0x77, 0x61, 0x73, 0x6d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x77, 0x0a, 0x1e, 0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x02, 0x52, 0x1b, 0x74, 0x72,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x84, 0x01, 0x0a, 0x23, 0x74, 0x72,
	0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x02, 0x52,
	0x1f, 0x74, 0x72, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x87, 0x01, 0x0a, 0x24, 0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69,
	0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x02, 0x52, 0x20, 0x74, 0x72, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x12, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x42, 0x54, 0x0a, 0x13, 0x76,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e,
	0x76, 0x31, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x6b,
	0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0xba, 0x02, 0x02, 0x56,
	0x53, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vultisig_keysign_v1_keysign_message_proto_rawDescOnce sync.Once
	file_vultisig_keysign_v1_keysign_message_proto_rawDescData = file_vultisig_keysign_v1_keysign_message_proto_rawDesc
)

func file_vultisig_keysign_v1_keysign_message_proto_rawDescGZIP() []byte {
	file_vultisig_keysign_v1_keysign_message_proto_rawDescOnce.Do(func() {
		file_vultisig_keysign_v1_keysign_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_vultisig_keysign_v1_keysign_message_proto_rawDescData)
	})
	return file_vultisig_keysign_v1_keysign_message_proto_rawDescData
}

var file_vultisig_keysign_v1_keysign_message_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_vultisig_keysign_v1_keysign_message_proto_goTypes = []any{
	(*KeysignMessage)(nil),                   // 0: vultisig.keysign.v1.KeysignMessage
	(*KeysignPayload)(nil),                   // 1: vultisig.keysign.v1.KeysignPayload
	(*CustomMessagePayload)(nil),             // 2: vultisig.keysign.v1.CustomMessagePayload
	(*Coin)(nil),                             // 3: vultisig.keysign.v1.Coin
	(*UTXOSpecific)(nil),                     // 4: vultisig.keysign.v1.UTXOSpecific
	(*EthereumSpecific)(nil),                 // 5: vultisig.keysign.v1.EthereumSpecific
	(*THORChainSpecific)(nil),                // 6: vultisig.keysign.v1.THORChainSpecific
	(*MAYAChainSpecific)(nil),                // 7: vultisig.keysign.v1.MAYAChainSpecific
	(*CosmosSpecific)(nil),                   // 8: vultisig.keysign.v1.CosmosSpecific
	(*SolanaSpecific)(nil),                   // 9: vultisig.keysign.v1.SolanaSpecific
	(*PolkadotSpecific)(nil),                 // 10: vultisig.keysign.v1.PolkadotSpecific
	(*SuiSpecific)(nil),                      // 11: vultisig.keysign.v1.SuiSpecific
	(*TonSpecific)(nil),                      // 12: vultisig.keysign.v1.TonSpecific
	(*RippleSpecific)(nil),                   // 13: vultisig.keysign.v1.RippleSpecific
	(*TronSpecific)(nil),                     // 14: vultisig.keysign.v1.TronSpecific
	(*CardanoChainSpecific)(nil),             // 15: vultisig.keysign.v1.CardanoChainSpecific
	(*UtxoInfo)(nil),                         // 16: vultisig.keysign.v1.UtxoInfo
	(*THORChainSwapPayload)(nil),             // 17: vultisig.keysign.v1.THORChainSwapPayload
	(*OneInchSwapPayload)(nil),               // 18: vultisig.keysign.v1.OneInchSwapPayload
	(*KyberSwapPayload)(nil),                 // 19: vultisig.keysign.v1.KyberSwapPayload
	(*Erc20ApprovePayload)(nil),              // 20: vultisig.keysign.v1.Erc20ApprovePayload
	(*WasmExecuteContractPayload)(nil),       // 21: vultisig.keysign.v1.WasmExecuteContractPayload
	(*TronTransferContractPayload)(nil),      // 22: vultisig.keysign.v1.TronTransferContractPayload
	(*TronTriggerSmartContractPayload)(nil),  // 23: vultisig.keysign.v1.TronTriggerSmartContractPayload
	(*TronTransferAssetContractPayload)(nil), // 24: vultisig.keysign.v1.TronTransferAssetContractPayload
}
var file_vultisig_keysign_v1_keysign_message_proto_depIdxs = []int32{
	1,  // 0: vultisig.keysign.v1.KeysignMessage.keysign_payload:type_name -> vultisig.keysign.v1.KeysignPayload
	2,  // 1: vultisig.keysign.v1.KeysignMessage.custom_message_payload:type_name -> vultisig.keysign.v1.CustomMessagePayload
	3,  // 2: vultisig.keysign.v1.KeysignPayload.coin:type_name -> vultisig.keysign.v1.Coin
	4,  // 3: vultisig.keysign.v1.KeysignPayload.utxo_specific:type_name -> vultisig.keysign.v1.UTXOSpecific
	5,  // 4: vultisig.keysign.v1.KeysignPayload.ethereum_specific:type_name -> vultisig.keysign.v1.EthereumSpecific
	6,  // 5: vultisig.keysign.v1.KeysignPayload.thorchain_specific:type_name -> vultisig.keysign.v1.THORChainSpecific
	7,  // 6: vultisig.keysign.v1.KeysignPayload.maya_specific:type_name -> vultisig.keysign.v1.MAYAChainSpecific
	8,  // 7: vultisig.keysign.v1.KeysignPayload.cosmos_specific:type_name -> vultisig.keysign.v1.CosmosSpecific
	9,  // 8: vultisig.keysign.v1.KeysignPayload.solana_specific:type_name -> vultisig.keysign.v1.SolanaSpecific
	10, // 9: vultisig.keysign.v1.KeysignPayload.polkadot_specific:type_name -> vultisig.keysign.v1.PolkadotSpecific
	11, // 10: vultisig.keysign.v1.KeysignPayload.suiche_specific:type_name -> vultisig.keysign.v1.SuiSpecific
	12, // 11: vultisig.keysign.v1.KeysignPayload.ton_specific:type_name -> vultisig.keysign.v1.TonSpecific
	13, // 12: vultisig.keysign.v1.KeysignPayload.ripple_specific:type_name -> vultisig.keysign.v1.RippleSpecific
	14, // 13: vultisig.keysign.v1.KeysignPayload.tron_specific:type_name -> vultisig.keysign.v1.TronSpecific
	15, // 14: vultisig.keysign.v1.KeysignPayload.cardano:type_name -> vultisig.keysign.v1.CardanoChainSpecific
	16, // 15: vultisig.keysign.v1.KeysignPayload.utxo_info:type_name -> vultisig.keysign.v1.UtxoInfo
	17, // 16: vultisig.keysign.v1.KeysignPayload.thorchain_swap_payload:type_name -> vultisig.keysign.v1.THORChainSwapPayload
	17, // 17: vultisig.keysign.v1.KeysignPayload.mayachain_swap_payload:type_name -> vultisig.keysign.v1.THORChainSwapPayload
	18, // 18: vultisig.keysign.v1.KeysignPayload.oneinch_swap_payload:type_name -> vultisig.keysign.v1.OneInchSwapPayload
	19, // 19: vultisig.keysign.v1.KeysignPayload.kyberswap_swap_payload:type_name -> vultisig.keysign.v1.KyberSwapPayload
	20, // 20: vultisig.keysign.v1.KeysignPayload.erc20_approve_payload:type_name -> vultisig.keysign.v1.Erc20ApprovePayload
	21, // 21: vultisig.keysign.v1.KeysignPayload.wasm_execute_contract_payload:type_name -> vultisig.keysign.v1.WasmExecuteContractPayload
	22, // 22: vultisig.keysign.v1.KeysignPayload.tron_transfer_contract_payload:type_name -> vultisig.keysign.v1.TronTransferContractPayload
	23, // 23: vultisig.keysign.v1.KeysignPayload.tron_trigger_smart_contract_payload:type_name -> vultisig.keysign.v1.TronTriggerSmartContractPayload
	24, // 24: vultisig.keysign.v1.KeysignPayload.tron_transfer_asset_contract_payload:type_name -> vultisig.keysign.v1.TronTransferAssetContractPayload
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_vultisig_keysign_v1_keysign_message_proto_init() }
func file_vultisig_keysign_v1_keysign_message_proto_init() {
	if File_vultisig_keysign_v1_keysign_message_proto != nil {
		return
	}
	file_vultisig_keysign_v1_1inch_swap_payload_proto_init()
	file_vultisig_keysign_v1_blockchain_specific_proto_init()
	file_vultisig_keysign_v1_coin_proto_init()
	file_vultisig_keysign_v1_custom_message_payload_proto_init()
	file_vultisig_keysign_v1_erc20_approve_payload_proto_init()
	file_vultisig_keysign_v1_kyberswap_swap_payload_proto_init()
	file_vultisig_keysign_v1_thorchain_swap_payload_proto_init()
	file_vultisig_keysign_v1_utxo_info_proto_init()
	file_vultisig_keysign_v1_wasm_execute_contract_payload_proto_init()
	file_vultisig_keysign_v1_tron_contract_payload_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vultisig_keysign_v1_keysign_message_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*KeysignMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v1_keysign_message_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*KeysignPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vultisig_keysign_v1_keysign_message_proto_msgTypes[0].OneofWrappers = []any{}
	file_vultisig_keysign_v1_keysign_message_proto_msgTypes[1].OneofWrappers = []any{
		(*KeysignPayload_UtxoSpecific)(nil),
		(*KeysignPayload_EthereumSpecific)(nil),
		(*KeysignPayload_ThorchainSpecific)(nil),
		(*KeysignPayload_MayaSpecific)(nil),
		(*KeysignPayload_CosmosSpecific)(nil),
		(*KeysignPayload_SolanaSpecific)(nil),
		(*KeysignPayload_PolkadotSpecific)(nil),
		(*KeysignPayload_SuicheSpecific)(nil),
		(*KeysignPayload_TonSpecific)(nil),
		(*KeysignPayload_RippleSpecific)(nil),
		(*KeysignPayload_TronSpecific)(nil),
		(*KeysignPayload_Cardano)(nil),
		(*KeysignPayload_ThorchainSwapPayload)(nil),
		(*KeysignPayload_MayachainSwapPayload)(nil),
		(*KeysignPayload_OneinchSwapPayload)(nil),
		(*KeysignPayload_KyberswapSwapPayload)(nil),
		(*KeysignPayload_WasmExecuteContractPayload)(nil),
		(*KeysignPayload_TronTransferContractPayload)(nil),
		(*KeysignPayload_TronTriggerSmartContractPayload)(nil),
		(*KeysignPayload_TronTransferAssetContractPayload)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vultisig_keysign_v1_keysign_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vultisig_keysign_v1_keysign_message_proto_goTypes,
		DependencyIndexes: file_vultisig_keysign_v1_keysign_message_proto_depIdxs,
		MessageInfos:      file_vultisig_keysign_v1_keysign_message_proto_msgTypes,
	}.Build()
	File_vultisig_keysign_v1_keysign_message_proto = out.File
	file_vultisig_keysign_v1_keysign_message_proto_rawDesc = nil
	file_vultisig_keysign_v1_keysign_message_proto_goTypes = nil
	file_vultisig_keysign_v1_keysign_message_proto_depIdxs = nil
}
