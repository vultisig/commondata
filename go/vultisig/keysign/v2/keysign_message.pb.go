// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: vultisig/keysign/v2/keysign_message.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	v1 "vultisig/keysign/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CosmosTransaction_TransactionType int32

const (
	CosmosTransaction_TRANSACTION_TYPE_UNSPECIFIED CosmosTransaction_TransactionType = 0
	CosmosTransaction_TRANSACTION_TYPE_VOTE        CosmosTransaction_TransactionType = 1
	CosmosTransaction_TRANSACTION_TYPE_PROPOSAL    CosmosTransaction_TransactionType = 2
)

// Enum value maps for CosmosTransaction_TransactionType.
var (
	CosmosTransaction_TransactionType_name = map[int32]string{
		0: "TRANSACTION_TYPE_UNSPECIFIED",
		1: "TRANSACTION_TYPE_VOTE",
		2: "TRANSACTION_TYPE_PROPOSAL",
	}
	CosmosTransaction_TransactionType_value = map[string]int32{
		"TRANSACTION_TYPE_UNSPECIFIED": 0,
		"TRANSACTION_TYPE_VOTE":        1,
		"TRANSACTION_TYPE_PROPOSAL":    2,
	}
)

func (x CosmosTransaction_TransactionType) Enum() *CosmosTransaction_TransactionType {
	p := new(CosmosTransaction_TransactionType)
	*p = x
	return p
}

func (x CosmosTransaction_TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CosmosTransaction_TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_vultisig_keysign_v2_keysign_message_proto_enumTypes[0].Descriptor()
}

func (CosmosTransaction_TransactionType) Type() protoreflect.EnumType {
	return &file_vultisig_keysign_v2_keysign_message_proto_enumTypes[0]
}

func (x CosmosTransaction_TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CosmosTransaction_TransactionType.Descriptor instead.
func (CosmosTransaction_TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_vultisig_keysign_v2_keysign_message_proto_rawDescGZIP(), []int{2, 0}
}

type KeysignMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId        string          `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ServiceName      string          `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	EncryptionKeyHex string          `protobuf:"bytes,4,opt,name=encryption_key_hex,json=encryptionKeyHex,proto3" json:"encryption_key_hex,omitempty"`
	KeysignPayload   *KeysignPayload `protobuf:"bytes,5,opt,name=keysign_payload,json=keysignPayload,proto3" json:"keysign_payload,omitempty"`
	UseVultisigRelay bool            `protobuf:"varint,6,opt,name=use_vultisig_relay,json=useVultisigRelay,proto3" json:"use_vultisig_relay,omitempty"`
}

func (x *KeysignMessage) Reset() {
	*x = KeysignMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v2_keysign_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysignMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysignMessage) ProtoMessage() {}

func (x *KeysignMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v2_keysign_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysignMessage.ProtoReflect.Descriptor instead.
func (*KeysignMessage) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v2_keysign_message_proto_rawDescGZIP(), []int{0}
}

func (x *KeysignMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *KeysignMessage) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *KeysignMessage) GetEncryptionKeyHex() string {
	if x != nil {
		return x.EncryptionKeyHex
	}
	return ""
}

func (x *KeysignMessage) GetKeysignPayload() *KeysignPayload {
	if x != nil {
		return x.KeysignPayload
	}
	return nil
}

func (x *KeysignMessage) GetUseVultisigRelay() bool {
	if x != nil {
		return x.UseVultisigRelay
	}
	return false
}

type EVMTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin                *v1.Coin                `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin,omitempty"`
	ToAddress           string                  `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	ToAmount            string                  `protobuf:"bytes,3,opt,name=to_amount,json=toAmount,proto3" json:"to_amount,omitempty"`
	MaxFeePerGasWei     string                  `protobuf:"bytes,4,opt,name=max_fee_per_gas_wei,json=maxFeePerGasWei,proto3" json:"max_fee_per_gas_wei,omitempty"`
	PriorityFee         string                  `protobuf:"bytes,5,opt,name=priority_fee,json=priorityFee,proto3" json:"priority_fee,omitempty"`
	Nonce               int64                   `protobuf:"varint,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasLimit            string                  `protobuf:"bytes,7,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Memo                *string                 `protobuf:"bytes,8,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
	Erc20ApprovePayload *v1.Erc20ApprovePayload `protobuf:"bytes,9,opt,name=erc20_approve_payload,json=erc20ApprovePayload,proto3,oneof" json:"erc20_approve_payload,omitempty"`
}

func (x *EVMTransaction) Reset() {
	*x = EVMTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v2_keysign_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMTransaction) ProtoMessage() {}

func (x *EVMTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v2_keysign_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVMTransaction.ProtoReflect.Descriptor instead.
func (*EVMTransaction) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v2_keysign_message_proto_rawDescGZIP(), []int{1}
}

func (x *EVMTransaction) GetCoin() *v1.Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

func (x *EVMTransaction) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *EVMTransaction) GetToAmount() string {
	if x != nil {
		return x.ToAmount
	}
	return ""
}

func (x *EVMTransaction) GetMaxFeePerGasWei() string {
	if x != nil {
		return x.MaxFeePerGasWei
	}
	return ""
}

func (x *EVMTransaction) GetPriorityFee() string {
	if x != nil {
		return x.PriorityFee
	}
	return ""
}

func (x *EVMTransaction) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *EVMTransaction) GetGasLimit() string {
	if x != nil {
		return x.GasLimit
	}
	return ""
}

func (x *EVMTransaction) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

func (x *EVMTransaction) GetErc20ApprovePayload() *v1.Erc20ApprovePayload {
	if x != nil {
		return x.Erc20ApprovePayload
	}
	return nil
}

type CosmosTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin            *v1.Coin                          `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin,omitempty"`
	ToAddress       string                            `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	ToAmount        string                            `protobuf:"bytes,3,opt,name=to_amount,json=toAmount,proto3" json:"to_amount,omitempty"`
	AccountNumber   uint64                            `protobuf:"varint,4,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	Sequence        uint64                            `protobuf:"varint,5,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Gas             uint64                            `protobuf:"varint,6,opt,name=gas,proto3" json:"gas,omitempty"`
	TransactionType CosmosTransaction_TransactionType `protobuf:"varint,7,opt,name=transaction_type,json=transactionType,proto3,enum=vultisig.keysign.v2.CosmosTransaction_TransactionType" json:"transaction_type,omitempty"`
}

func (x *CosmosTransaction) Reset() {
	*x = CosmosTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v2_keysign_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CosmosTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosmosTransaction) ProtoMessage() {}

func (x *CosmosTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v2_keysign_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosmosTransaction.ProtoReflect.Descriptor instead.
func (*CosmosTransaction) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v2_keysign_message_proto_rawDescGZIP(), []int{2}
}

func (x *CosmosTransaction) GetCoin() *v1.Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

func (x *CosmosTransaction) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *CosmosTransaction) GetToAmount() string {
	if x != nil {
		return x.ToAmount
	}
	return ""
}

func (x *CosmosTransaction) GetAccountNumber() uint64 {
	if x != nil {
		return x.AccountNumber
	}
	return 0
}

func (x *CosmosTransaction) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *CosmosTransaction) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *CosmosTransaction) GetTransactionType() CosmosTransaction_TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return CosmosTransaction_TRANSACTION_TYPE_UNSPECIFIED
}

type THORChainTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromCoin      *v1.Coin `protobuf:"bytes,1,opt,name=from_coin,json=fromCoin,proto3" json:"from_coin,omitempty"`
	ToAddress     string   `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	ToAmount      string   `protobuf:"bytes,3,opt,name=to_amount,json=toAmount,proto3" json:"to_amount,omitempty"`
	AccountNumber uint64   `protobuf:"varint,4,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	Sequence      uint64   `protobuf:"varint,5,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Fee           uint64   `protobuf:"varint,6,opt,name=fee,proto3" json:"fee,omitempty"`
	IsDeposit     string   `protobuf:"bytes,7,opt,name=is_deposit,json=isDeposit,proto3" json:"is_deposit,omitempty"` // probably don't need it , because when `to_address` is empty , it's a deposit , still keep it to make it specific
	Memo          string   `protobuf:"bytes,8,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *THORChainTransaction) Reset() {
	*x = THORChainTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v2_keysign_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *THORChainTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*THORChainTransaction) ProtoMessage() {}

func (x *THORChainTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v2_keysign_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use THORChainTransaction.ProtoReflect.Descriptor instead.
func (*THORChainTransaction) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v2_keysign_message_proto_rawDescGZIP(), []int{3}
}

func (x *THORChainTransaction) GetFromCoin() *v1.Coin {
	if x != nil {
		return x.FromCoin
	}
	return nil
}

func (x *THORChainTransaction) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *THORChainTransaction) GetToAmount() string {
	if x != nil {
		return x.ToAmount
	}
	return ""
}

func (x *THORChainTransaction) GetAccountNumber() uint64 {
	if x != nil {
		return x.AccountNumber
	}
	return 0
}

func (x *THORChainTransaction) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *THORChainTransaction) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *THORChainTransaction) GetIsDeposit() string {
	if x != nil {
		return x.IsDeposit
	}
	return ""
}

func (x *THORChainTransaction) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type UTXOTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin          *v1.Coin       `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin,omitempty"`
	ToAddress     string         `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	ToAmount      string         `protobuf:"bytes,3,opt,name=to_amount,json=toAmount,proto3" json:"to_amount,omitempty"`
	ByteFee       string         `protobuf:"bytes,4,opt,name=byte_fee,json=byteFee,proto3" json:"byte_fee,omitempty"`
	SendMaxAmount bool           `protobuf:"varint,5,opt,name=send_max_amount,json=sendMaxAmount,proto3" json:"send_max_amount,omitempty"`
	Memo          *string        `protobuf:"bytes,6,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
	UtxoInfo      []*v1.UtxoInfo `protobuf:"bytes,7,rep,name=utxo_info,json=utxoInfo,proto3" json:"utxo_info,omitempty"`
}

func (x *UTXOTransaction) Reset() {
	*x = UTXOTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v2_keysign_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UTXOTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTXOTransaction) ProtoMessage() {}

func (x *UTXOTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v2_keysign_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTXOTransaction.ProtoReflect.Descriptor instead.
func (*UTXOTransaction) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v2_keysign_message_proto_rawDescGZIP(), []int{4}
}

func (x *UTXOTransaction) GetCoin() *v1.Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

func (x *UTXOTransaction) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *UTXOTransaction) GetToAmount() string {
	if x != nil {
		return x.ToAmount
	}
	return ""
}

func (x *UTXOTransaction) GetByteFee() string {
	if x != nil {
		return x.ByteFee
	}
	return ""
}

func (x *UTXOTransaction) GetSendMaxAmount() bool {
	if x != nil {
		return x.SendMaxAmount
	}
	return false
}

func (x *UTXOTransaction) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

func (x *UTXOTransaction) GetUtxoInfo() []*v1.UtxoInfo {
	if x != nil {
		return x.UtxoInfo
	}
	return nil
}

type SolanaTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin                       *v1.Coin `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin,omitempty"`
	ToAddress                  string   `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	ToAmount                   string   `protobuf:"bytes,3,opt,name=to_amount,json=toAmount,proto3" json:"to_amount,omitempty"`
	RecentBlockHash            string   `protobuf:"bytes,4,opt,name=recent_block_hash,json=recentBlockHash,proto3" json:"recent_block_hash,omitempty"`
	PriorityFee                string   `protobuf:"bytes,5,opt,name=priority_fee,json=priorityFee,proto3" json:"priority_fee,omitempty"`
	FromTokenAssociatedAddress *string  `protobuf:"bytes,6,opt,name=from_token_associated_address,json=fromTokenAssociatedAddress,proto3,oneof" json:"from_token_associated_address,omitempty"`
	ToTokenAssociatedAddress   *string  `protobuf:"bytes,7,opt,name=to_token_associated_address,json=toTokenAssociatedAddress,proto3,oneof" json:"to_token_associated_address,omitempty"`
	Memo                       *string  `protobuf:"bytes,8,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
}

func (x *SolanaTransaction) Reset() {
	*x = SolanaTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v2_keysign_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaTransaction) ProtoMessage() {}

func (x *SolanaTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v2_keysign_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaTransaction.ProtoReflect.Descriptor instead.
func (*SolanaTransaction) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v2_keysign_message_proto_rawDescGZIP(), []int{5}
}

func (x *SolanaTransaction) GetCoin() *v1.Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

func (x *SolanaTransaction) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *SolanaTransaction) GetToAmount() string {
	if x != nil {
		return x.ToAmount
	}
	return ""
}

func (x *SolanaTransaction) GetRecentBlockHash() string {
	if x != nil {
		return x.RecentBlockHash
	}
	return ""
}

func (x *SolanaTransaction) GetPriorityFee() string {
	if x != nil {
		return x.PriorityFee
	}
	return ""
}

func (x *SolanaTransaction) GetFromTokenAssociatedAddress() string {
	if x != nil && x.FromTokenAssociatedAddress != nil {
		return *x.FromTokenAssociatedAddress
	}
	return ""
}

func (x *SolanaTransaction) GetToTokenAssociatedAddress() string {
	if x != nil && x.ToTokenAssociatedAddress != nil {
		return *x.ToTokenAssociatedAddress
	}
	return ""
}

func (x *SolanaTransaction) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

type PolkadotTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin               *v1.Coin `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin,omitempty"`
	ToAddress          string   `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	ToAmount           string   `protobuf:"bytes,3,opt,name=to_amount,json=toAmount,proto3" json:"to_amount,omitempty"`
	RecentBlockHash    string   `protobuf:"bytes,4,opt,name=recent_block_hash,json=recentBlockHash,proto3" json:"recent_block_hash,omitempty"`
	Nonce              uint64   `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	CurrentBlockNumber string   `protobuf:"bytes,6,opt,name=current_block_number,json=currentBlockNumber,proto3" json:"current_block_number,omitempty"`
	SpecVersion        uint32   `protobuf:"varint,7,opt,name=spec_version,json=specVersion,proto3" json:"spec_version,omitempty"`
	TransactionVersion uint32   `protobuf:"varint,8,opt,name=transaction_version,json=transactionVersion,proto3" json:"transaction_version,omitempty"`
	GenesisHash        string   `protobuf:"bytes,9,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty"`
	Memo               *string  `protobuf:"bytes,10,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
}

func (x *PolkadotTransaction) Reset() {
	*x = PolkadotTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v2_keysign_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolkadotTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolkadotTransaction) ProtoMessage() {}

func (x *PolkadotTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v2_keysign_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolkadotTransaction.ProtoReflect.Descriptor instead.
func (*PolkadotTransaction) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v2_keysign_message_proto_rawDescGZIP(), []int{6}
}

func (x *PolkadotTransaction) GetCoin() *v1.Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

func (x *PolkadotTransaction) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *PolkadotTransaction) GetToAmount() string {
	if x != nil {
		return x.ToAmount
	}
	return ""
}

func (x *PolkadotTransaction) GetRecentBlockHash() string {
	if x != nil {
		return x.RecentBlockHash
	}
	return ""
}

func (x *PolkadotTransaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *PolkadotTransaction) GetCurrentBlockNumber() string {
	if x != nil {
		return x.CurrentBlockNumber
	}
	return ""
}

func (x *PolkadotTransaction) GetSpecVersion() uint32 {
	if x != nil {
		return x.SpecVersion
	}
	return 0
}

func (x *PolkadotTransaction) GetTransactionVersion() uint32 {
	if x != nil {
		return x.TransactionVersion
	}
	return 0
}

func (x *PolkadotTransaction) GetGenesisHash() string {
	if x != nil {
		return x.GenesisHash
	}
	return ""
}

func (x *PolkadotTransaction) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

// SwapInfo is mostly for display purpose
type SwapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToCoin       *v1.Coin `protobuf:"bytes,1,opt,name=to_coin,json=toCoin,proto3" json:"to_coin,omitempty"`
	Provider     string   `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	Slippage     string   `protobuf:"bytes,3,opt,name=slippage,proto3" json:"slippage,omitempty"`
	Fee          string   `protobuf:"bytes,4,opt,name=fee,proto3" json:"fee,omitempty"`
	TargetAmount string   `protobuf:"bytes,5,opt,name=target_amount,json=targetAmount,proto3" json:"target_amount,omitempty"`
}

func (x *SwapInfo) Reset() {
	*x = SwapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v2_keysign_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapInfo) ProtoMessage() {}

func (x *SwapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v2_keysign_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapInfo.ProtoReflect.Descriptor instead.
func (*SwapInfo) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v2_keysign_message_proto_rawDescGZIP(), []int{7}
}

func (x *SwapInfo) GetToCoin() *v1.Coin {
	if x != nil {
		return x.ToCoin
	}
	return nil
}

func (x *SwapInfo) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *SwapInfo) GetSlippage() string {
	if x != nil {
		return x.Slippage
	}
	return ""
}

func (x *SwapInfo) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *SwapInfo) GetTargetAmount() string {
	if x != nil {
		return x.TargetAmount
	}
	return ""
}

type KeysignPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Transaction:
	//
	//	*KeysignPayload_EvmTransaction
	//	*KeysignPayload_CosmosTransaction
	//	*KeysignPayload_ThorchainTransaction
	//	*KeysignPayload_UtxoTransaction
	//	*KeysignPayload_SolanaTransaction
	//	*KeysignPayload_PolkadotTransaction
	Transaction isKeysignPayload_Transaction `protobuf_oneof:"transaction"`
	// when swap_info is not empty , then the pair device shoudl treat it as a swap
	// 1. Show swap verify screen
	// 2. for EVM chain , need to construct a generic smart contract transaction
	SwapInfo            *SwapInfo `protobuf:"bytes,20,opt,name=swap_info,json=swapInfo,proto3,oneof" json:"swap_info,omitempty"`
	VaultPublicKeyEcdsa string    `protobuf:"bytes,31,opt,name=vault_public_key_ecdsa,json=vaultPublicKeyEcdsa,proto3" json:"vault_public_key_ecdsa,omitempty"`
	VaultLocalPartyId   string    `protobuf:"bytes,32,opt,name=vault_local_party_id,json=vaultLocalPartyId,proto3" json:"vault_local_party_id,omitempty"`
}

func (x *KeysignPayload) Reset() {
	*x = KeysignPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vultisig_keysign_v2_keysign_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysignPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysignPayload) ProtoMessage() {}

func (x *KeysignPayload) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v2_keysign_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysignPayload.ProtoReflect.Descriptor instead.
func (*KeysignPayload) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v2_keysign_message_proto_rawDescGZIP(), []int{8}
}

func (m *KeysignPayload) GetTransaction() isKeysignPayload_Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (x *KeysignPayload) GetEvmTransaction() *EVMTransaction {
	if x, ok := x.GetTransaction().(*KeysignPayload_EvmTransaction); ok {
		return x.EvmTransaction
	}
	return nil
}

func (x *KeysignPayload) GetCosmosTransaction() *CosmosTransaction {
	if x, ok := x.GetTransaction().(*KeysignPayload_CosmosTransaction); ok {
		return x.CosmosTransaction
	}
	return nil
}

func (x *KeysignPayload) GetThorchainTransaction() *THORChainTransaction {
	if x, ok := x.GetTransaction().(*KeysignPayload_ThorchainTransaction); ok {
		return x.ThorchainTransaction
	}
	return nil
}

func (x *KeysignPayload) GetUtxoTransaction() *UTXOTransaction {
	if x, ok := x.GetTransaction().(*KeysignPayload_UtxoTransaction); ok {
		return x.UtxoTransaction
	}
	return nil
}

func (x *KeysignPayload) GetSolanaTransaction() *SolanaTransaction {
	if x, ok := x.GetTransaction().(*KeysignPayload_SolanaTransaction); ok {
		return x.SolanaTransaction
	}
	return nil
}

func (x *KeysignPayload) GetPolkadotTransaction() *PolkadotTransaction {
	if x, ok := x.GetTransaction().(*KeysignPayload_PolkadotTransaction); ok {
		return x.PolkadotTransaction
	}
	return nil
}

func (x *KeysignPayload) GetSwapInfo() *SwapInfo {
	if x != nil {
		return x.SwapInfo
	}
	return nil
}

func (x *KeysignPayload) GetVaultPublicKeyEcdsa() string {
	if x != nil {
		return x.VaultPublicKeyEcdsa
	}
	return ""
}

func (x *KeysignPayload) GetVaultLocalPartyId() string {
	if x != nil {
		return x.VaultLocalPartyId
	}
	return ""
}

type isKeysignPayload_Transaction interface {
	isKeysignPayload_Transaction()
}

type KeysignPayload_EvmTransaction struct {
	EvmTransaction *EVMTransaction `protobuf:"bytes,1,opt,name=evm_transaction,json=evmTransaction,proto3,oneof"`
}

type KeysignPayload_CosmosTransaction struct {
	CosmosTransaction *CosmosTransaction `protobuf:"bytes,2,opt,name=cosmos_transaction,json=cosmosTransaction,proto3,oneof"`
}

type KeysignPayload_ThorchainTransaction struct {
	ThorchainTransaction *THORChainTransaction `protobuf:"bytes,3,opt,name=thorchain_transaction,json=thorchainTransaction,proto3,oneof"`
}

type KeysignPayload_UtxoTransaction struct {
	UtxoTransaction *UTXOTransaction `protobuf:"bytes,4,opt,name=utxo_transaction,json=utxoTransaction,proto3,oneof"`
}

type KeysignPayload_SolanaTransaction struct {
	SolanaTransaction *SolanaTransaction `protobuf:"bytes,5,opt,name=solana_transaction,json=solanaTransaction,proto3,oneof"`
}

type KeysignPayload_PolkadotTransaction struct {
	PolkadotTransaction *PolkadotTransaction `protobuf:"bytes,6,opt,name=polkadot_transaction,json=polkadotTransaction,proto3,oneof"`
}

func (*KeysignPayload_EvmTransaction) isKeysignPayload_Transaction() {}

func (*KeysignPayload_CosmosTransaction) isKeysignPayload_Transaction() {}

func (*KeysignPayload_ThorchainTransaction) isKeysignPayload_Transaction() {}

func (*KeysignPayload_UtxoTransaction) isKeysignPayload_Transaction() {}

func (*KeysignPayload_SolanaTransaction) isKeysignPayload_Transaction() {}

func (*KeysignPayload_PolkadotTransaction) isKeysignPayload_Transaction() {}

var File_vultisig_keysign_v2_keysign_message_proto protoreflect.FileDescriptor

var file_vultisig_keysign_v2_keysign_message_proto_rawDesc = []byte{
	0x0a, 0x29, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x69,
	0x67, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x76, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x32,
	0x1a, 0x1e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x69,
	0x67, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2f, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x69,
	0x67, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x23, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x73,
	0x69, 0x67, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x74, 0x78, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x01, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x73, 0x69,
	0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x48, 0x65, 0x78, 0x12, 0x4c, 0x0a, 0x0f, 0x6b, 0x65, 0x79,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x76,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x73, 0x65, 0x56, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x9e, 0x03, 0x0a, 0x0e, 0x45, 0x56, 0x4d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x57, 0x65,
	0x69, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61,
	0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x61, 0x0a, 0x15, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69,
	0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x63, 0x32, 0x30, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x01, 0x52, 0x13, 0x65, 0x72, 0x63,
	0x32, 0x30, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa5, 0x03, 0x0a, 0x11, 0x43, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x61, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x6d, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x02, 0x22, 0x92,
	0x02, 0x0a, 0x14, 0x54, 0x48, 0x4f, 0x52, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x22, 0x9d, 0x02, 0x0a, 0x0f, 0x55, 0x54, 0x58, 0x4f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x09, 0x75, 0x74, 0x78, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x75, 0x74, 0x78, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x22, 0xbd, 0x03, 0x0a, 0x11, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x46, 0x65, 0x65, 0x12, 0x46, 0x0a, 0x1d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1a, 0x66, 0x72,
	0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x1b, 0x74,
	0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x18, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x74,
	0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x22, 0x8d, 0x03, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x22, 0xad, 0x01, 0x0a, 0x08, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x32, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x06, 0x74, 0x6f,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xea, 0x05, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4e, 0x0a, 0x0f, 0x65, 0x76, 0x6d, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69,
	0x67, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x56, 0x4d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x76, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x12, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x60, 0x0a, 0x15, 0x74, 0x68, 0x6f, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x48, 0x4f, 0x52, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x74, 0x68, 0x6f,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x10, 0x75, 0x74, 0x78, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x55, 0x54, 0x58, 0x4f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x74, 0x78, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x12, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x69, 0x67, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x73, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a,
	0x14, 0x70, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x70, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x69,
	0x67, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01,
	0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x16, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x65, 0x63, 0x64, 0x73, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x45, 0x63, 0x64,
	0x73, 0x61, 0x12, 0x2f, 0x0a, 0x14, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x42, 0x2f, 0x0a, 0x13, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x32, 0x5a, 0x13, 0x76, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x2f, 0x76, 0x32, 0xba, 0x02, 0x02, 0x56,
	0x53, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vultisig_keysign_v2_keysign_message_proto_rawDescOnce sync.Once
	file_vultisig_keysign_v2_keysign_message_proto_rawDescData = file_vultisig_keysign_v2_keysign_message_proto_rawDesc
)

func file_vultisig_keysign_v2_keysign_message_proto_rawDescGZIP() []byte {
	file_vultisig_keysign_v2_keysign_message_proto_rawDescOnce.Do(func() {
		file_vultisig_keysign_v2_keysign_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_vultisig_keysign_v2_keysign_message_proto_rawDescData)
	})
	return file_vultisig_keysign_v2_keysign_message_proto_rawDescData
}

var file_vultisig_keysign_v2_keysign_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vultisig_keysign_v2_keysign_message_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_vultisig_keysign_v2_keysign_message_proto_goTypes = []any{
	(CosmosTransaction_TransactionType)(0), // 0: vultisig.keysign.v2.CosmosTransaction.TransactionType
	(*KeysignMessage)(nil),                 // 1: vultisig.keysign.v2.KeysignMessage
	(*EVMTransaction)(nil),                 // 2: vultisig.keysign.v2.EVMTransaction
	(*CosmosTransaction)(nil),              // 3: vultisig.keysign.v2.CosmosTransaction
	(*THORChainTransaction)(nil),           // 4: vultisig.keysign.v2.THORChainTransaction
	(*UTXOTransaction)(nil),                // 5: vultisig.keysign.v2.UTXOTransaction
	(*SolanaTransaction)(nil),              // 6: vultisig.keysign.v2.SolanaTransaction
	(*PolkadotTransaction)(nil),            // 7: vultisig.keysign.v2.PolkadotTransaction
	(*SwapInfo)(nil),                       // 8: vultisig.keysign.v2.SwapInfo
	(*KeysignPayload)(nil),                 // 9: vultisig.keysign.v2.KeysignPayload
	(*v1.Coin)(nil),                        // 10: vultisig.keysign.v1.Coin
	(*v1.Erc20ApprovePayload)(nil),         // 11: vultisig.keysign.v1.Erc20ApprovePayload
	(*v1.UtxoInfo)(nil),                    // 12: vultisig.keysign.v1.UtxoInfo
}
var file_vultisig_keysign_v2_keysign_message_proto_depIdxs = []int32{
	9,  // 0: vultisig.keysign.v2.KeysignMessage.keysign_payload:type_name -> vultisig.keysign.v2.KeysignPayload
	10, // 1: vultisig.keysign.v2.EVMTransaction.coin:type_name -> vultisig.keysign.v1.Coin
	11, // 2: vultisig.keysign.v2.EVMTransaction.erc20_approve_payload:type_name -> vultisig.keysign.v1.Erc20ApprovePayload
	10, // 3: vultisig.keysign.v2.CosmosTransaction.coin:type_name -> vultisig.keysign.v1.Coin
	0,  // 4: vultisig.keysign.v2.CosmosTransaction.transaction_type:type_name -> vultisig.keysign.v2.CosmosTransaction.TransactionType
	10, // 5: vultisig.keysign.v2.THORChainTransaction.from_coin:type_name -> vultisig.keysign.v1.Coin
	10, // 6: vultisig.keysign.v2.UTXOTransaction.coin:type_name -> vultisig.keysign.v1.Coin
	12, // 7: vultisig.keysign.v2.UTXOTransaction.utxo_info:type_name -> vultisig.keysign.v1.UtxoInfo
	10, // 8: vultisig.keysign.v2.SolanaTransaction.coin:type_name -> vultisig.keysign.v1.Coin
	10, // 9: vultisig.keysign.v2.PolkadotTransaction.coin:type_name -> vultisig.keysign.v1.Coin
	10, // 10: vultisig.keysign.v2.SwapInfo.to_coin:type_name -> vultisig.keysign.v1.Coin
	2,  // 11: vultisig.keysign.v2.KeysignPayload.evm_transaction:type_name -> vultisig.keysign.v2.EVMTransaction
	3,  // 12: vultisig.keysign.v2.KeysignPayload.cosmos_transaction:type_name -> vultisig.keysign.v2.CosmosTransaction
	4,  // 13: vultisig.keysign.v2.KeysignPayload.thorchain_transaction:type_name -> vultisig.keysign.v2.THORChainTransaction
	5,  // 14: vultisig.keysign.v2.KeysignPayload.utxo_transaction:type_name -> vultisig.keysign.v2.UTXOTransaction
	6,  // 15: vultisig.keysign.v2.KeysignPayload.solana_transaction:type_name -> vultisig.keysign.v2.SolanaTransaction
	7,  // 16: vultisig.keysign.v2.KeysignPayload.polkadot_transaction:type_name -> vultisig.keysign.v2.PolkadotTransaction
	8,  // 17: vultisig.keysign.v2.KeysignPayload.swap_info:type_name -> vultisig.keysign.v2.SwapInfo
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_vultisig_keysign_v2_keysign_message_proto_init() }
func file_vultisig_keysign_v2_keysign_message_proto_init() {
	if File_vultisig_keysign_v2_keysign_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vultisig_keysign_v2_keysign_message_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*KeysignMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v2_keysign_message_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*EVMTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v2_keysign_message_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CosmosTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v2_keysign_message_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*THORChainTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v2_keysign_message_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UTXOTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v2_keysign_message_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SolanaTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v2_keysign_message_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PolkadotTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v2_keysign_message_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*SwapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vultisig_keysign_v2_keysign_message_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*KeysignPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vultisig_keysign_v2_keysign_message_proto_msgTypes[1].OneofWrappers = []any{}
	file_vultisig_keysign_v2_keysign_message_proto_msgTypes[4].OneofWrappers = []any{}
	file_vultisig_keysign_v2_keysign_message_proto_msgTypes[5].OneofWrappers = []any{}
	file_vultisig_keysign_v2_keysign_message_proto_msgTypes[6].OneofWrappers = []any{}
	file_vultisig_keysign_v2_keysign_message_proto_msgTypes[8].OneofWrappers = []any{
		(*KeysignPayload_EvmTransaction)(nil),
		(*KeysignPayload_CosmosTransaction)(nil),
		(*KeysignPayload_ThorchainTransaction)(nil),
		(*KeysignPayload_UtxoTransaction)(nil),
		(*KeysignPayload_SolanaTransaction)(nil),
		(*KeysignPayload_PolkadotTransaction)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vultisig_keysign_v2_keysign_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vultisig_keysign_v2_keysign_message_proto_goTypes,
		DependencyIndexes: file_vultisig_keysign_v2_keysign_message_proto_depIdxs,
		EnumInfos:         file_vultisig_keysign_v2_keysign_message_proto_enumTypes,
		MessageInfos:      file_vultisig_keysign_v2_keysign_message_proto_msgTypes,
	}.Build()
	File_vultisig_keysign_v2_keysign_message_proto = out.File
	file_vultisig_keysign_v2_keysign_message_proto_rawDesc = nil
	file_vultisig_keysign_v2_keysign_message_proto_goTypes = nil
	file_vultisig_keysign_v2_keysign_message_proto_depIdxs = nil
}
