// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: vultisig/keysign/v1/custom_message_payload.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct VSCustomMessagePayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var method: String = String()

  public var message: String = String()

  public var vaultPublicKeyEcdsa: String = String()

  public var vaultLocalPartyID: String = String()

  public var chain: String {
    get {return _chain ?? String()}
    set {_chain = newValue}
  }
  /// Returns true if `chain` has been explicitly set.
  public var hasChain: Bool {return self._chain != nil}
  /// Clears the value of `chain`. Subsequent reads from it will return its default value.
  public mutating func clearChain() {self._chain = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _chain: String? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension VSCustomMessagePayload: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "vultisig.keysign.v1"

extension VSCustomMessagePayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CustomMessagePayload"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "method"),
    2: .same(proto: "message"),
    3: .standard(proto: "vault_public_key_ecdsa"),
    4: .standard(proto: "vault_local_party_id"),
    5: .same(proto: "chain"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.method) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.vaultPublicKeyEcdsa) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.vaultLocalPartyID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._chain) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.method.isEmpty {
      try visitor.visitSingularStringField(value: self.method, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if !self.vaultPublicKeyEcdsa.isEmpty {
      try visitor.visitSingularStringField(value: self.vaultPublicKeyEcdsa, fieldNumber: 3)
    }
    if !self.vaultLocalPartyID.isEmpty {
      try visitor.visitSingularStringField(value: self.vaultLocalPartyID, fieldNumber: 4)
    }
    try { if let v = self._chain {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: VSCustomMessagePayload, rhs: VSCustomMessagePayload) -> Bool {
    if lhs.method != rhs.method {return false}
    if lhs.message != rhs.message {return false}
    if lhs.vaultPublicKeyEcdsa != rhs.vaultPublicKeyEcdsa {return false}
    if lhs.vaultLocalPartyID != rhs.vaultLocalPartyID {return false}
    if lhs._chain != rhs._chain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
