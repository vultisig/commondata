// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: vultisig/keysign/v1/coin.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Coin only contains information that the app can use it to identify the relevant coin in the vault
public struct VSCoin {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var chain: String = String()

  public var ticker: String = String()

  public var address: String = String()

  public var contractAddress: String = String()

  public var decimals: Int32 = 0

  public var priceProviderID: String = String()

  public var isNativeToken: Bool = false

  public var hexPublicKey: String = String()

  public var logo: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension VSCoin: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "vultisig.keysign.v1"

extension VSCoin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Coin"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chain"),
    2: .same(proto: "ticker"),
    3: .same(proto: "address"),
    4: .standard(proto: "contract_address"),
    5: .same(proto: "decimals"),
    6: .standard(proto: "price_provider_id"),
    7: .standard(proto: "is_native_token"),
    8: .standard(proto: "hex_public_key"),
    9: .same(proto: "logo"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chain) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.ticker) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.decimals) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.priceProviderID) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.isNativeToken) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.hexPublicKey) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.logo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chain.isEmpty {
      try visitor.visitSingularStringField(value: self.chain, fieldNumber: 1)
    }
    if !self.ticker.isEmpty {
      try visitor.visitSingularStringField(value: self.ticker, fieldNumber: 2)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 3)
    }
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 4)
    }
    if self.decimals != 0 {
      try visitor.visitSingularInt32Field(value: self.decimals, fieldNumber: 5)
    }
    if !self.priceProviderID.isEmpty {
      try visitor.visitSingularStringField(value: self.priceProviderID, fieldNumber: 6)
    }
    if self.isNativeToken != false {
      try visitor.visitSingularBoolField(value: self.isNativeToken, fieldNumber: 7)
    }
    if !self.hexPublicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.hexPublicKey, fieldNumber: 8)
    }
    if !self.logo.isEmpty {
      try visitor.visitSingularStringField(value: self.logo, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: VSCoin, rhs: VSCoin) -> Bool {
    if lhs.chain != rhs.chain {return false}
    if lhs.ticker != rhs.ticker {return false}
    if lhs.address != rhs.address {return false}
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.decimals != rhs.decimals {return false}
    if lhs.priceProviderID != rhs.priceProviderID {return false}
    if lhs.isNativeToken != rhs.isNativeToken {return false}
    if lhs.hexPublicKey != rhs.hexPublicKey {return false}
    if lhs.logo != rhs.logo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
